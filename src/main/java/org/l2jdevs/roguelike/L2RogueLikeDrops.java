/*
 * Copyright © 2004-2019 L2J Server
 * 
 * This file is part of L2J Server.
 * 
 * L2J Server is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * L2J Server is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.l2jdevs.roguelike;

// import java.util.Arrays;

import org.l2jdevs.Config;
import org.l2jdevs.gameserver.model.items.type.CrystalType;

/**
 * implementation of Roguelike items drop mechanics:
 * droppable items datasets.
 * @author RKorskov
 */

public final class L2RogueLikeDrops {
    // private static final Logger LOG = LoggerFactory.getLogger(L2RogueLikeDrops.class);

    private L2RogueLikeDrops(){;}

    protected final static int ITEM_ID_ADENA = 57,
        ITEM_ID_IRON_ORE = 1869, // 200元
        ITEM_ID_STEEL = 1880, // 1000元
        ITEM_ID_SILVER = 1873, // 500元
        ITEM_ID_MITHRIL_ORE = 1876, // 2000元
        ITEM_ID_MITHRIL_ALLOY = 1890, // 13100元
        ITEM_ID_ORIHARUKON_ORE = 1874, // 3000元
        ITEM_ID_ORIHARUKON = 1893, // 24600元
        ITEM_ID_LEATHER = 1882, // 900元
        ITEM_ID_BONE = 1872, // 150元
        ITEM_ID_THREAD = 1868, // 100元
        ITEM_ID_ADAMANTITE = 1877, //  adamantite nugget 1877 5000元, adamantite 9629, adamantite ore 1024
        ITEM_ID_STEM = 1864, // 100元
        ITEM_ID_STONE_OF_PURITY = 1875 // 3000元
        ;

    /**
     * droppable and stackable item IDs for non-animals
     * (humanoid, demons, undead, magical)
     */
    protected final static int[] ROGUELIKE_DROP_LIST = {
        2130, 2131, 2132, 2133, 2134, // gemstone D..S
        1785, 3031, // soul ore, spirit ore
        CrystalType.A.getCrystalId(),
        CrystalType.B.getCrystalId(),
        CrystalType.C.getCrystalId(),
        CrystalType.D.getCrystalId(),
        CrystalType.S.getCrystalId(),
        1835, 1463, 1464, 1465, 1466, 1467, // SoulShot
        2509, 2510, 2511, 2512, 2513, 2514, // SpiritShot
        6645, 6646, 6647, // Beast S.Shot
        3947, 3948, 3949, 3950, 3951, 3952, // Blessed Spiritshot
        17, 1341, 1342, 1343, 1344, 1345, // arrows
        7562, // dimensional diamond
        // lure
        7807, 6519, 6520, 6521, 8505, 8506, 8507, // green lure
        7808, 6522, 6523, 6524, 8508, 8509, 8510, // purple lure
        7809, 6525, 6526, 6527, 8511, 8512, 8513, // yellow lure
        6535, 6536, 6537, 6538, 6539, 6540, // fishing shot
        ITEM_ID_ADENA // tail end, just in case of... something
    };

    /**
     * Graded single droppable items
     * 1. droppable single item IDs for non-animals
     * (humanoid, demons, undead, magical, ...)
     * 2. Useful items, pile of which made game too easy
     * 3. funny items, like echo crystalls
     */
    protected final static int[] ROGUELIKE_SINGLE_DROP_LIST = {
        5192, 5193, 5194, 5195, 5196, // magic rope D..S
        // Scrolls data/enchantItemData.xml
        729, 947, 951, 955, 959, // enchant weapon scroll : A B C D S
        730, 948, 952, 956, 960, // enchant armor scroll
        // blessed enchant scroll
        6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577, 6578,
        22006, 22007, 22008, 22009, 20517, // Weapon Enchant Scrolls +10%
        22010, 22011, 22012, 22013, 20518, // Armor Enchant Scrolls +10%
        22014, 22015, 20519, // Ancient Weapon Enchant Crystal 16EL  +10%
        22016, 22017, 20520, // Ancient Armor Enchant Crystal 16EL +10%
        731, 949, 953, 957, 961, // Crystal Scrolls: Enchant Weapon +100%
        732, 950, 954, 958, 962, // Crystal Scrolls: Enchant Armor +100%
        22018, 22019, 20521, // Divine Weapon Enchant Crystal +100%
        22020, 22021, 20522, // Divine Armor Enchant Crystal +100%
        22221, 22223, 22225, 22227, 22229, // Scroll Enchant Weapon of Destruction 15EL
        22222, 22224, 22226, 22228, 22230, // Scroll Enchant Armor of Destruction 6EL
        12362, 12363, 12364, 12365, 12366, // Weapon-Type Enhance Backup Stone
        12367, 12368, 12369, 12370, 12371, // Armor-Type Enhance Backup Stone
        14702, 14703, 14704, 14705, 14706, // Agathion Auxiliary Stone: Enchant Weapon
        14707, 14708, 14709, 14710, 14711, // Agathion Auxiliary Stone: Enchant Armor
        // pack of s-shots
        5134, 5135, 5136, 5137, 5138, 5139, // C.Pack of Soulshots
        5140, 5141, 5142, 5143, 5144, 5145, // C.Pack Spiritshots
        5146, 5147, 5148, 5149, 5150, 5151, // C.Pack Bl.Sp.Shots
        5250, 5251, 5252, 5253, 5254, 5255, // Gr.C.Pack of Soulshots
        5256, 5257, 5258, 5259, 5260, 5261, // Gr.C.Pack of Spiritshots
        5262, 5263, 5264, 5265, 5266, 5267, // Gr.C.Pack Bl.Spiritshots
        // stackable packs, but it is too useful to drop them in heaps
        10515, 10516, 10517, // Beast S.Shot C.Pack
        20326, 20327, 20328, // Beast S.Shot Pack
        20329, 20330, 20331, // Beast S.Shot L.Pack
        22100, 22101, 22102, 22103, // Spiritshot Pack
        22114, 22115, 22116, 22117, 22118, // Spiritshot Large Pack
        22109, 22110, 22111, 22112, 22113, // Bl.Sp.Shot L.Pack
        22094, 22095, 22096, 22097, 22098, // Blessed Spiritshot Pack
        22099, // Spiritshot Pack C
        22104, 22105, 22106, 22107, 22108, // Soulshot Pack
        22119, 22120, 22121, 22122, 22123, // Soulshot Large Pack
        8594, 8595, 8596, 8597, 8598, 8599, // scroll of recovery
        6529, 6530, 6531, 6532, 6533, 6534, // fishing rod
        // Shirt (underwear)
        9577, 9578, 9579, 9580, 9581, 9582, 9583, 9584, 9585, 9586, 9587,
        9588,
        // Bracelet
        9589, 9590, 9591, 9592, 10209, 10210,
        // Ring
        116, 117, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
        887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
        901, 902, 903, 904, 905,
        // Necklace
        906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
        920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
        934, 935, 936, 118, 119,
        // Earring
        112, 113, 114, 115, 845, 846, 847, 848, 849, 850, 851, 952, 853, 854,
        855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
        869, 870, 871, 872, 873, 874,
        // Belt
        13894, 13895, 13896, 13897,
        // Magic Pin Belt
        13954, 13955, 13956, 13957, 13958, 13959, 13960, 13961, 13962, 13963,
        13964, 13965, 13966, 13967, 13968, 13969,
        // Magic Pin
        13902, 13903, 13904, 13905, 13906, 13907, 13908, 13909, 13910, 13911,
        13913, 13914, 13915, 13916, 13917,
        // Magic Pouch Belt
        13938, 13939, 13940, 13941, 13942, 13943, 13944, 13945, 13946, 13947,
        13948, 13949, 13950, 13951, 13952, 13953,
        // Magic Pouch
        13922, 13923, 13924, 13925, 13926, 13927, 13928, 13929, 13930, 13931,
        13932, 13933, 13934, 13935, 13936, 13937,
        // Cloak
        614, 615, 616, 617, 618, 620, 621, 623, 2490, 2491, 2492,
        // hair accessory
        12372, 12373,
        14712, 14749, 14750, 14751,
        // Potions
        1060, 1061, 1539, 1540, // healing potion
        1831, 1832, // antidote
        735, // alacrity
        ITEM_ID_ADENA // tail's end, just in case of... something
    };

    /**
     * Non-Graded single drop items
     * It have special itemRate evaluation function, not based on it
     * crystal value.
     * Here comes head accessory, dyes, ...
     */
    protected final static int[] ROGUELIKE_SINGLE_DROP_LIST_NG = {
        // Head accessory (hat, pin, mask, etc.), no grade
        5808, 6394, 6843, 6844, 6845, 6846, 7680, 7681, 7682, 7683, 7695,
        7696, 8184, 8185, 8186, 8187, 8188, 8189, 8552, 8559, 8560, 8561,
        8562, 8563, 8564, 8565, 8569, 8660, 8661, 8912, 8913, 8914, 8915,
        8916, 8917, 8918, 8920, 8921, 8922, 8923, 21108, 21112, 21114, 21116,
        21118, 21120, 21122, 21124, 21126, 21110,
        20500, 20501, 20401, 20499, 20922, 20944, 8910, 8919, 8936,
        8947, 8948, 8949, 8950, 8951,
        // Dye of ...
        6961, 6962, 6963, 6964, 6965, 4445, 4446, 4447, 4448, 4449, 4450,
        4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461,
        4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472,
        4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480,
        5238, 5239, 5240, 5241,
        // Recipe: Dye of ...
        6943, 6944, 6945, 6946, 6954, 6955, 6956, 6957, 6958, 6959, 6960,
        // Greater Dye of ...
        4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510,
        4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521,
        4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532,
        4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543,
        4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554,
        4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565,
        4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576,
        4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587,
        4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598,
        4599, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490,
        4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4600, 4601,
        4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612,
        4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623,
        4624,
        // Recipe: Greater Dye of ...
        6966, 6967, 6968, 6969, 6970, 6971, 6972, 6973, 6974, 6975, 6976,
        6977, 6978, 6979, 6980, 6981, 6982, 6983, 6984, 6985, 6986, 6987,
        6988, 6989, 6990, 6991, 6992, 6993, 6994, 6995, 6996, 6997, 6998,
        6999, 7000, 7001, 7002, 7003, 7004, 7005, 7006, 7007, 7008, 7009,
        7010, 7011, 7012, 7013,
        // fisherman potion
        8200, 8201, 8202, 8193, 8194, 8195, 8196, 8197, 8198, 8199,
        // colored fish scales
        8351, 8352, 8353, 8354, 8355, 8356, 8357, 8358, 8359,
        // misc fish byproduct
        6908, 6909, 6910, 6911, 6912, 6913, 6914, 6915, 6916,
        6920, 6921, // fish oil recipe
        // fished chests
        6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502,
        6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513,
        6514, 6515, 6516, 6517, 6518,
        // small fish
        7800, 6411, 6412, 6413, 6420, 6421, 6422, 6429, 6430, 6431, 6438,
        6439, 6440, 6447, 6448, 6449, 6456, 6457, 6458, 6465, 6466, 6467,
        6474, 6475, 6476, 6483, 6484, 6485, 8403, 8404, 8405, 8412, 8413,
        8414, 8421, 8422, 8423, 8430, 8431, 8432, 8439, 8440, 8441, 8448,
        8449, 8450, 8457, 8458, 8459, 8466, 8467, 8468, 8475, 8476, 8477,
        7726, 7727, 7728, 7735, 7736, 7737, 7744, 7745, 7746, 7753, 7754,
        7755, 7762, 7763, 7764, 7771, 7772, 7773, 7780, 7781, 7782, 7789,
        7790, 7791, 7798, 7799,
        // (medium) fish
        7801, 7802, 7803, 6414, 6415, 6416, 6423, 6424, 6425, 6426, 6427,
        6428, 6432, 6433, 6434, 6435, 6436, 6437, 6441, 6442, 6443, 6444,
        6445, 6446, 6450, 6451, 6452, 6453, 6454, 6455, 6459, 6460, 6461,
        6462, 6463, 6464, 6468, 6469, 6470, 6471, 6472, 6473, 6477, 6478,
        6479, 6480, 6481, 6482, 6486, 6487, 6488, 6489, 6490, 6491, 8406,
        8407, 8408, 8415, 8416, 8417, 8424, 8425, 8426, 8433, 8434, 8435,
        8442, 8443, 8444, 8451, 8452, 8453, 8460, 8461, 8462, 8469, 8470,
        8471, 8478, 8479, 8480, 7729, 7730, 7731, 7738, 7739, 7740, 7747,
        7748, 7749, 7756, 7757, 7758, 7765, 7766, 7767, 7774, 7775, 7776,
        7783, 7784, 7785, 7792, 7793, 7794,
        // large fish
        7804, 7805, 7806, 6417, 6418, 6419, 8409, 8410, 8411, 8418, 8419,
        8420, 8427, 8428, 8429, 8436, 8437, 8438, 8445, 8446, 8447, 8454,
        8455, 8456, 8463, 8464, 8465, 8472, 8473, 8474, 8481, 8482, 8483,
        7732, 7733, 7734, 7741, 7742, 7743, 7750, 7751, 7752, 7759, 7760,
        7761, 7768, 7769, 7770, 7777, 7778, 7779, 7786, 7787, 7788, 7795,
        7796, 7797,
        // echo crystals
        5010, 10520, 21158,
        4411, 4412, 4413, 4414, 4415, 4416, 4417, 5562, 5563,
        5564, 5565, 5566, 5583, 5584, 5585, 5586, 5587, 7061, 7062, 8555,
        4408, 4409, 4410, 4418, 4419, 4420, 4421, // musical score
        1661, // thief key
        7562, // dimensional diamond
        6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, // deluxe chest key
        // fruits
        // fruit * Coba
        17087, 17089, 17091, 6541, 6542, 6543, 6544, 6545, 6546, 6547, 6548,
        6549, 6550, 6551, 6552, 6553, 6554, 6555, 6556, 6557, 6558, 6559,
        6560, 6561, 6562, 6563, 6564, 6565, 6566, 6567, 6568,
        // fruit * Coda
        5065, 5066, 5067, 5068, 5069, 5070, 5071, 5072, 5073, 5074, 5095,
        5096, 5097, 5098, 5099, 5818, 5819, 5820, 5821, 5822, 5823, 5824,
        5838, 5839, 5840, 5841, 5842, 5843, 5844, 5100, 5101, 5102, 5103,
        5104,
        // fruit * Cobol
        5075, 5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5825,
        5826, 5827, 5828, 5829, 5830, 5845, 5846, 5847, 5848, 5849, 5850,
        5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114,
        // fruit * Codran
        5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5094, 5831,
        5832, 5833, 5834, 5835, 5836, 5837, 5851, 5852, 5853, 5854, 5855,
        5856, 5857, 5115, 5116, 5117, 5118, 5119, 5120, 5121, 5122, 5123,
        5124,
        5575, // ancient adena
        ITEM_ID_ADENA // tail end, just in case of... something
    };

    /**
     * droppable and stackable item IDs for animals
     * 0: S.Shots, Food
     * 1: Armor, Weapon
     */
    protected final static int[] ANIMAL_DROP_LIST = { // roguelikeAnimalDropList
        6645, 6646, 6647, // Beast S.Shot
        5168, 5169, 6316, 4038, 10425, 2515, 9668, 14818, // Pet Food
        // ingredients : stem, bone, skin, stone of purity
        1864, 1867, 1872, 1875,
        // gemstone D-S
        2130, 2131, 2132, 2133, 2134,
        // glass shard and other junk :)
        1336, 1337, 1338, 1339, 1340,
        // amulet pieces
        6700, 1900, 1910, 1917, 1920, 4051, 1896, 1897, 1899, 15771, 15774,
        1907, 1913, 1898, 9992,
        // earring pieces
        15770, 15773, 5483, 5484, 1905, 1911, 1914, 1918, 6341, 6342, 4049,
        9991,
        // ring pieces
        15769, 15772, 5492, 5493, 1912, 1915, 1919, 6345, 6346, 4053, 2917,
        9993,
        // Ring
        116, 117, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
        887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
        901, 902, 903, 904, 905,
        // Earring
        112, 113, 114, 115, 845, 846, 847, 848, 849, 850, 851, 952, 853, 854,
        855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
        869, 870, 871, 872, 873, 874,
        // Magic Pin
        13902, 13903, 13904, 13905, 13906, 13907, 13908, 13909, 13910, 13911,
        13913, 13914, 13915, 13916, 13917,
        // fish scales, bones and gems
        6911, 6912, 6913, 6914, 6915, 6916,
        // colored fish scales
        8351, 8352, 8353, 8354, 8355, 8356, 8357, 8358, 8359,
        // echo crystals
        5010, 10520, 7589,
        5343, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 5562, 5563,
        5564, 5565, 5566, 5583, 5584, 5585, 5586, 5587, 7061, 7062, 8555,
        // chest keys
        1661, // thief key
        7562, // dimensional diamond
        6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, // deluxe chest key
        // fruits
        // fruit * Coba
        17087, 17089, 17091, 6541, 6542, 6543, 6544, 6545, 6546, 6547, 6548,
        6549, 6550, 6551, 6552, 6553, 6554, 6555, 6556, 6557, 6558, 6559,
        6560, 6561, 6562, 6563, 6564, 6565, 6566, 6567, 6568,
        // fruit * Coda
        5065, 5066, 5067, 5068, 5069, 5070, 5071, 5072, 5073, 5074, 5095,
        5096, 5097, 5098, 5099, 5818, 5819, 5820, 5821, 5822, 5823, 5824,
        5838, 5839, 5840, 5841, 5842, 5843, 5844, 5100, 5101, 5102, 5103,
        5104,
        // fruit * Cobol
        5075, 5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5825,
        5826, 5827, 5828, 5829, 5830, 5845, 5846, 5847, 5848, 5849, 5850,
        5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114,
        // fruit * Codran
        5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5094, 5831,
        5832, 5833, 5834, 5835, 5836, 5837, 5851, 5852, 5853, 5854, 5855,
        5856, 5857, 5115, 5116, 5117, 5118, 5119, 5120, 5121, 5122, 5123,
        5124,
        5575, // ancient adena
        ITEM_ID_ADENA // tail end, just in case of... something
    };

    // S.+Shots IDs NG..S
    protected final static int[] SOUL_SHOT_ID_LIST = // soulShotID
    {1835, 1463, 1464, 1465, 1466, 1467};
    protected final static int[] SPIRIT_SHOT_ID_LIST = // spiritShotID
    {2509, 2510, 2511, 2512, 2513, 2514};

    /**
     * list of mappings for mapping functions Grade(Level) Level(Grade)
     */
    final static int[] LEVEL_BY_GRADE = { // levelByGrade
        0, 20, 40, 52, 61, 76, 80, 84, Config.MAX_PLAYER_LEVEL
    };

    final static int[][] ROGUELIKE_DROP_AMMO_LIST = {
        // NG  D     C     B     A     S
        {17,   1341, 1342, 1343, 1344, 1345}, // arrow
        {9632, 9633, 9634, 9635, 9636, 9637}  // bolt
    };

    final static int[] ROGUELIKE_DROP_STONES = {
        1785, 3031, // soul ore, spirit ore
        7562, // dimensional diamond
        2130, 2131, 2132, 2133, 2134, // gemstone D..S
        CrystalType.A.getCrystalId(),
        CrystalType.B.getCrystalId(),
        CrystalType.C.getCrystalId(),
        CrystalType.D.getCrystalId(),
        CrystalType.S.getCrystalId(),
    };

    /**
     * list of mappings of itemId to shardId;
     * even : item Ids
     * odd  : shard Ids
     *
     * done : bow, shield, knife, dagger
     * todo : dist/game/data/recipes.xml : 208
     */
    final static int[] equipment_shards_weapon = {
        1, 2005, // short sword
        2, 2012, // long sword
        3, 2005, // broad sword
        8, 2006, // willow staff
        9, 2008, // cedar staff
        14, 2007, // bow
        15, 2011, // short spear
        70, 2047, // claymore
        71, 2059, // flamberge
        72, 2060, // stormbringer
        87, 2014, // iron hammer
        88, 2031, // morning star
        89, 2061, // big hammer
        90, 2032, // goathead staff
        93, 2033, // winged spear
        96, 2063, // scythe
        120, 2012, // sword of reflexion
        123, 2017, // saber
        124, 2026, // 2h sword
        125, 2021, // spinebone sword
        129, 2034, // sword of revolution
        157, 2027, // spiked club
        158, 2035, // tarbar
        159, 2048, // bone breaker
        160, 2063, // battle axe
        161, 2064, // war pick
        169, 2036, // skull breaker
        172, 2037, // heavy bone club
        173, 2065, // skull graver
        180, 2022, // mace of judgement
        184, 2023, // conjurer staff
        187, 2049, // atuba hammer
        188, 2050, // ghost staff
        189, 2051, // life stick
        190, 2058, // atuba mace
        191, 2066, // heavy doom hammer
        192, 2067, // crystal staff
        193, 2068, // stick of faith
        194, 2069, // heavy doom axe
        216, 2009, // dirk
        217, 2009, // shining knife
        218, 2009, // throwing dagger
        219, 2015, // sword breaker
        220, 2015, // crafted dagger
        221, 2018, // assassin knife
        222, 2018, // poniard dagger
        223, 2038, // kukuri
        224, 2038, // maingauche
        225, 2052, // mithril dagger
        226, 2070, // cursed dagger
        228, 2119, // crystal dagger
        230, 2071, // wolverine needle
        231, 2106, // grace dagger
        232, 2072, // dark elven dagger
        238, 2028, // dagger of mana
        239, 2028, // mystic knife
        240, 2028, // conjurer's knife
        241, 2028, // shilen knife
        242, 2084, // dagger of magic flame
        243, 4110, // hell knife
        261, 2039, // bich'hwa
        262, 2053, // scallop jamadhr
        263, 2073, // chakram
        264, 5008, // pata
        271, 2013, // hunting bow
        272, 2013, // forest bow
        273, 2016, // composite bow
        274, 4112, // reinforced bow
        275, 2024, // long bow
        276, 2024, // elven bow
        278, 2029, // gastraphetes
        279, 2040, // reinforced long bow
        280, 2054, // cyclone bow
        281, 2074, // crystallized ice bow
        282, 2085, // elemental bow
        283, 2109, // akat long bow
        284, 4112, // dark elven bow
        285, 2086, // noble elven bow
        286, 2121, // eminence bow
        287, 4121, // hazard bow
        288, 5535, // carnium bow
        289, 5534, // soul bow
        291, 2019, // trident
        294, 2041, // hammer in flames
        295, 2025, // dwarven trident
        297, 2055, // glaive
        298, 2076, // orcish glaive
        302, 2076, // body slasher
        313, 2020, // temptation of abyss
        317, 2030, // tome of blood
        318, 2043, // crucifix of blood
        319, 2043, // eye of infinity
        320, 2045, // blue crystal skull
        321, 2046, // demon fangs
        322, 2056, // vajra wand
        323, 2057, // ancient reagent
        324, 2087, // tears of fairy
        946, 2009, // skeleton knife
        1309, 2009, // crafted dagger
        1333, 2010, // brandish
        1660, 2044, // cursed maingauche
        2134, 6692, // shining bow
        2499, 2967, // elven long sword
        7575, 7579, // draconic bow
        8684, 8718, // shyid bow
        9445, 9619, // dynasty bow
        9446, 9620, // dynasty dagger
    };

    final static int[] equipment_shards_shield = {
        103, 1978, // tower shield
        107, 4055, // composite shield
        110, 4077, // doom shield
        626, 1947, // bronze shield
        627, 1947, // aspis
        628, 1947, // hoplon
        629, 1947, // kite shield
        630, 1956, // square shield
        631, 1964, // eldarake
        632, 1972, // knight shield
        633, 4101, // shrnoen shield
        673, 4439, // avadon shield
        2493, 2929, // brigandine shield
        2494, 2934, // plate shield
        2495, 2945, // chain shield
        2496, 2947, // dwarven chain shield
        2497, 2966, // full plate shield
        5292, 5494, // sealed dark crystal shield
        5315, 5495, // sealed shield of nightmare
        6678, 6705, // sealed imperial crusader shield
        9529, 9545, // sealed dynasty shield
        15710, 15693, // sealed destino shield
    };

    // for n in `grep -ve ': 0 :' /tmp/scrollist.txt | grep -ie "true$" | grep -vie "recipe" -vie "blank scroll" -vie "forgotten" -vie "transformation" | cut -d ':' -f 1`; do printf "%s, " $n; done
    // data/enchantItemData.xml
    final static int[] ROGUELIKE_DROP_SCROLLS = {
        729, 947, 951, 955, 959, // Scrolls: Enchant Weapon
        730, 948, 952, 956, 960, // Scrolls: Enchant Armor
        6569, 6571, 6573, 6575, 6577, // Blessed Scrolls: Enchant Weapon
        6570, 6572, 6574, 6576, 6578, // Blessed Scrolls: Enchant Armor
        22006, 22007, 22008, 22009, 20517, // Weapon Enchant Scrolls
        22010, 22011, 22012, 22013, 20518, // Armor Enchant Scrolls
        731, 949, 953, 957, 961, // Crystal Scrolls: Enchant Weapon
        732, 950, 954, 958, 962, // Crystal Scrolls: Enchant Armor
        22014, 22015, 20519, // Ancient Weapon Enchant Crystal
        22016, 22017, 20520, // Ancient Armor Enchant Crystal
        22018, 22019, 20521, // Divine Weapon Enchant Crystal
        22020, 22021, 20522, // Divine Armor Enchant Crystal
        22221, 22223, 22225, 22227, 22229, // Scroll: Enchant Weapon of Destruction
        22222, 22224, 22226, 22228, 22230, // Scroll: Enchant Armor of Destruction
        // scrolls of escape
        7562, // dimensional diamond
        332, 336, 337, 731, 732, 736, 737, 949, 950,
        953, 954, 957, 958, 961, 962, 1538, 21194, 21195, 20583,
        1829, 1830, 2127, 3936, 5593, 5594, 5595, 5858, 5859, 6037, 6387,
        6569, 6652,
        6653, 6654, 6655, 6663, 6664, 7117, 7118, 7119, 7120, 7121, 7122,
        7123, 7124, 7125, 7126, 7127, 7128, 7129, 7130, 7131, 7132, 7133,
        7134, 7135, 7618, 7619, 8594, 8595, 8596, 8597, 8598, 8599, 9647,
        9898, 10129, 10130
    };

    /*
    // Head accessory (hat, pin, mask, etc.), no grade
    final static int[] HEAD_ACCESSORY = {
        5808, 6394, 6843, 6844, 6845, 6846, 7680, 7681, 7682, 7683, 7695,
        7696, 8184, 8185, 8186, 8187, 8188, 8189, 8552, 8559, 8560, 8561,
        8562, 8563, 8564, 8565, 8569, 8660, 8661, 8912, 8913, 8914, 8915,
        8916, 8917, 8918, 8920, 8921, 8922, 8923, 21108, 21112, 21114, 21116,
        21118, 21120, 21122, 21124, 21126
    };

    // Dye of ...
    final static int[] DYE = {
        6961, 6962, 6963, 6964, 6965, 4445, 4446, 4447, 4448, 4449, 4450,
        4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461,
        4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472,
        4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480,
        5238, 5239, 5240, 5241
    };

    // Greater Dye of ...
    final static int[] GREATER_DYE = {
        4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510,
        4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521,
        4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532,
        4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543,
        4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554,
        4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565,
        4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576,
        4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587,
        4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598,
        4599, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490,
        4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4600, 4601,
        4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612,
        4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623,
        4624
    };

    // Recipe: Greater Dye of ...
    final static int[] GREATER_DYE_RECIPE = {
        6966, 6967, 6968, 6969, 6970, 6971, 6972, 6973, 6974, 6975, 6976,
        6977, 6978, 6979, 6980, 6981, 6982, 6983, 6984, 6985, 6986, 6987,
        6988, 6989, 6990, 6991, 6992, 6993, 6994, 6995, 6996, 6997, 6998,
        6999, 7000, 7001, 7002, 7003, 7004, 7005, 7006, 7007, 7008, 7009,
        7010, 7011, 7012, 7013
    };

    // Recipe: Dye of ...
    final static int[] DYE_RECIPE = {
        6943, 6944, 6945, 6946, 6954, 6955, 6956, 6957, 6958, 6959, 6960,
    };

    // dwarven recipe of ...
    final static int[] DWARVEN_RECIPE = {
        9500, 9501, 9502, 9503, 9504, 9505, 9506, 9507, 9508, 9509, 9510,
        9511, 9512, 9513, 8294, 8295, 8296, 8297, 8298, 8299, 5000, 5001,
        5002, 5003, 5004, 5005, 5006, 5007, 5008, 1786, 1787, 1788, 1789,
        1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 5400,
        5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411,
        5412, 5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422,
        5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433,
        5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444,
        5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455,
        5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466,
        5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5476, 5477,
        9482, 9483, 9484, 9485, 9486, 9487, 9488, 9489, 9490, 9491, 9492,
        9493, 9494, 9495, 9496, 9497, 9498, 9499, 5153, 5154, 5155, 5156,
        5157, 5158, 5159, 5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167,
        4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946,
        4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957,
        4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968,
        4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979,
        4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990,
        4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 3838, 7580,
        7581, 1666, 3953, 3954, 3955, 3956, 3957, 6847, 6848, 6849, 6850,
        6851, 6852, 6853, 6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861,
        6862, 6863, 6864, 6865, 6866, 6867, 6868, 6869, 6870, 6871, 6872,
        6873, 6874, 6875, 6876, 6877, 6878, 6879, 6880, 6881, 6882, 6883,
        6884, 6885, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6894,
        6895, 6896, 6897, 6898, 6899, 6329, 6330, 6331, 6332, 6333, 6334,
        6335, 6336, 6337, 6338, 6339, 6340, 8300, 8301, 8302, 8303, 8304,
        8305, 8306, 8307, 8308, 8309, 8310, 8311, 8312, 8313, 8314, 8315,
        8316, 8317, 8318, 8319, 8320, 8321, 8322, 8323, 8324, 8325, 8326,
        8364, 8365, 8366, 8367, 8368, 8369, 8370, 8371, 8372, 10115,
        10116, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978,
        2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989,
        2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 8700,
        8701, 8702, 8703, 8704, 8705, 8706, 8707, 8708, 8709, 8710, 8711,
        6900, 6901, 6920, 6921, 6922, 6923, 6924, 6925, 6926, 6927, 6928,
        6929, 6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939,
        6940, 6941, 6942, 6947, 6948, 6949, 6950, 6951, 6952, 6953, 5741,
        5742, 5743, 5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752,
        5753, 5754, 5755, 5756, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
        1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
        1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
        2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210,
        2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
        2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232,
        2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243,
        2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254,
        2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265,
        2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276,
        2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287,
        2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298,
        2299, 7699, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143,
        2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154,
        2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165,
        2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176,
        2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187,
        2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198,
        2199, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009,
        3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020,
        3021, 3022, 3023, 3024, 3025, 3032, 3033, 3034, 3035, 3036, 5332,
        5333, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 5344, 5345,
        5346, 5347, 5348, 5349, 5350, 5351, 5352, 5353, 5354, 5355, 5364,
        5365, 5366, 5367, 5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375,
        5376, 5377, 5378, 5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386,
        5387, 5388, 5389, 5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397,
        5398, 5399, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308,
        2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319,
        2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330,
        2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341,
        2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352,
        2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363,
        2364, 2365, 2366, 2367, 4122, 4123, 4124, 4125, 4126, 4127, 4128,
        4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139,
        4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150,
        4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161,
        4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172,
        4173, 4174, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182, 4183,
        4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4194,
        4195, 4196, 4197, 4198, 4199, 4440, 4441, 8487, 8640, 8641, 8642,
        8643, 8644, 8645, 8646, 8647, 8648, 8649, 8650, 8651, 8652, 8653,
        8654, 8655, 8656, 8657, 8690, 8691, 8692, 8693, 8694, 8695, 8696,
        8697, 8698, 8699, 5230, 5231, 5268, 5269, 5270, 5271, 5272, 5273,
        5274, 5275, 5276, 5277, 5278, 5279, 5280, 5281, 5282, 7700, 8554
    };

    final static int[] FISH_MISC_OBJECTS = {
        // fisherman potion
        8200, 8201, 8202, 8193, 8194, 8195, 8196, 8197, 8198, 8199,
        // colored fish scales
        8351, 8352, 8353, 8354, 8355, 8356, 8357, 8358, 8359,
        // misc fish byproduct
        6908, 6909, 6910, 6911, 6912, 6913, 6914, 6915, 6916,
        6920, 6921, // fish oil recipe
        // fished chests
        6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502,
        6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513,
        6514, 6515, 6516, 6517, 6518
    };

    final static int[] FISH_SMALL = {
        // small fish
        7800, 6411, 6412, 6413, 6420, 6421, 6422, 6429, 6430, 6431, 6438,
        6439, 6440, 6447, 6448, 6449, 6456, 6457, 6458, 6465, 6466, 6467,
        6474, 6475, 6476, 6483, 6484, 6485, 8403, 8404, 8405, 8412, 8413,
        8414, 8421, 8422, 8423, 8430, 8431, 8432, 8439, 8440, 8441, 8448,
        8449, 8450, 8457, 8458, 8459, 8466, 8467, 8468, 8475, 8476, 8477,
        7726, 7727, 7728, 7735, 7736, 7737, 7744, 7745, 7746, 7753, 7754,
        7755, 7762, 7763, 7764, 7771, 7772, 7773, 7780, 7781, 7782, 7789,
        7790, 7791, 7798, 7799
    };

    // (Medium) Fish
    final static int[] FISH_MEDIUM = {
        7801, 7802, 7803, 6414, 6415, 6416, 6423, 6424, 6425, 6426, 6427,
        6428, 6432, 6433, 6434, 6435, 6436, 6437, 6441, 6442, 6443, 6444,
        6445, 6446, 6450, 6451, 6452, 6453, 6454, 6455, 6459, 6460, 6461,
        6462, 6463, 6464, 6468, 6469, 6470, 6471, 6472, 6473, 6477, 6478,
        6479, 6480, 6481, 6482, 6486, 6487, 6488, 6489, 6490, 6491, 8406,
        8407, 8408, 8415, 8416, 8417, 8424, 8425, 8426, 8433, 8434, 8435,
        8442, 8443, 8444, 8451, 8452, 8453, 8460, 8461, 8462, 8469, 8470,
        8471, 8478, 8479, 8480, 7729, 7730, 7731, 7738, 7739, 7740, 7747,
        7748, 7749, 7756, 7757, 7758, 7765, 7766, 7767, 7774, 7775, 7776,
        7783, 7784, 7785, 7792, 7793, 7794
    };

    // Large Fish
    final static int[] FISH_LARGE = {
        7804, 7805, 7806, 6417, 6418, 6419, 8409, 8410, 8411, 8418, 8419,
        8420, 8427, 8428, 8429, 8436, 8437, 8438, 8445, 8446, 8447, 8454,
        8455, 8456, 8463, 8464, 8465, 8472, 8473, 8474, 8481, 8482, 8483,
        7732, 7733, 7734, 7741, 7742, 7743, 7750, 7751, 7752, 7759, 7760,
        7761, 7768, 7769, 7770, 7777, 7778, 7779, 7786, 7787, 7788, 7795,
        7796, 7797,
    };

    // Echo Crystals and musical score
    final static int[] ECHO_CRYSTAL = {
        5010, 10520, 7589,
        5343, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 5562, 5563,
        5564, 5565, 5566, 5583, 5584, 5585, 5586, 5587, 7061, 7062, 8555
    };

    final static int[] MUSICAL_SCORE = {
        // musical score
        4408, 4409, 4410, 4418, 4419, 4420, 4421
    };

    final static int[] KEYS = {
        1661, // thief key
        6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672 // deluxe chest key
    };

    final static int[] seeds = { // manor seeds, all mixed in
        // seed * Coba
        6727, 6728, 6729, 6730, 6731, 6732, 6733, 6734, 6735, 6736, 6737,
        6738, 6739, 6740, 6741, 6742, 6743, 6744, 6745, 6746, 6747, 6748,
        6749, 6750, 6751, 6752, 6753, 6754, 6755, 6756, 6757, 6758, 6759,
        6760, 6761, 6762, 6763, 6764, 6765, 6766, 6767, 6768, 6769, 6770,
        6771, 6772, 6773, 6774, 6775, 6776, 6777, 6778, 8226, 8227, 8228,
        8229, 8233, 8234, 8235, 8236, 15327, 15328, 15329, 15330, 15331,
        15332, 15333, 15334, 15335, 15336, 15337, 15338, 15339, 15340,
        17088, 17090, 17092, 8521, 8522, 8523, 8524, 8525, 8526,
        // seed * Cobol
        5023, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037,
        5038, 5045, 5046, 5047, 5048, 5053, 5054, 5055, 5657, 5662, 5663,
        5664, 5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5679, 5680,
        5681, 5682, 5687, 5688, 5689, 5696, 5697, 5698, 5699, 5700, 8244,
        8245, 8246, 8247, 8248, 8249, 8262, 8263, 8264, 8265, 8266, 8267,
        5221, 5222, 5223, 5224, 5225, 7016, 7019, 7025, 7027, 7030, 7033,
        7039, 7041, 7044, 7051,
        // seed * coda
        5016, 5017, 5018, 5019, 5020, 5021, 5022, 5024, 5025, 5026, 5027,
        5042, 5043, 5044, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5658,
        5659, 5660, 5661, 5676, 5677, 5678, 8237, 8238, 8239, 8240, 8241,
        8242, 8243, 8255, 8256, 8257, 8258, 8259, 8260, 8261, 10171, 10172,
        10173, 10174, 10197, 10198, 10199, 10200, 10201, 10202, 7020, 7026,
        7034, 7040,
        // seed * Codran
        5039, 5040, 5041, 5049, 5050, 5051, 5052, 5056, 5057, 5058, 5059,
        5060, 5061, 5673, 5674, 5675, 5683, 5684, 5685, 5686, 5690, 5691,
        5692, 5693, 5694, 5695, 5701, 5702, 8223, 8224, 8225, 8230, 8231,
        8232, 8250, 8251, 8252, 8253, 8254, 8268, 8269, 8270, 8271, 8272,
        5226, 5227, 7017, 7018, 7021, 7022, 7023, 7024, 7028, 7029, 7031,
        7032, 7035, 7036, 7037, 7038, 7042, 7043, 7045, 7046, 7047, 7048,
        7049, 7050, 7052, 7053, 7054, 7055, 7056, 7057
    };

    final static int[] RINGS = {
        116, 117, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
        887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
        901, 902, 903, 904, 905
    };

    final static int[] BRACELETS = {
        9589, 9590, 9591, 9592, 10209, 10210
    };

    final static int[] NECKLACES = {
        906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
        920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
        934, 935, 936, 118, 119
    };

    final static int[] EARRINGS = {
        112, 113, 114, 115, 845, 846, 847, 848, 849, 850, 851, 952, 853, 854,
        855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
        869, 870, 871, 872, 873, 874
    };

    final static int[] SHIRTS = {
        9577, 9578, 9579, 9580, 9581, 9582, 9583, 9584, 9585, 9586, 9587,
        9588
    };

    final static int[] BELTS = {
        13894, 13895, 13896, 13897
    };

    final static int[] MAGIC_PIN_BELTS = {
        13954, 13955, 13956, 13957, 13958, 13959, 13960, 13961, 13962, 13963,
        13964, 13965, 13966, 13967, 13968, 13969
    };

    final static int[] MAGIC_PINS = {
        13902, 13903, 13904, 13905, 13906, 13907, 13908, 13909, 13910, 13911,
        13913, 13914, 13915, 13916, 13917
    };

    final static int[] MAGIC_POUCH_BELTS = {
        13938, 13939, 13940, 13941, 13942, 13943, 13944, 13945, 13946, 13947,
        13948, 13949, 13950, 13951, 13952, 13953
    };

    final static int[] MAGIC_POUCHES = {
        13922, 13923, 13924, 13925, 13926, 13927, 13928, 13929, 13930, 31931,
        13932, 13933, 13934, 13935, 13936, 13937
    };

    final static int[] CLOAKS = {
        614, 615, 616, 617, 618, 620, 621, 623, 2490, 2491, 2492
    };

    final static int[] POTION_BUFFS = {
        1060, 1061, 1539, 1540, // healing potion
        1831, 1832, // antidote
        735 // alacrity
    };

    final static int[] FISH_BYPRODUCTS = {
        // colored fish scales
        8351, 8352, 8353, 8354, 8355, 8356, 8357, 8358, 8359,
        // misc fish byproduct
        6908, 6909, 6910, 6911, 6912, 6913, 6914, 6915, 6916
    };

    final static int[] FISHED_CHESTS = {
        6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502,
        6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513,
        6514, 6515, 6516, 6517, 6518
    };

    final static int[] INGRIDIENT_SIMPLE = {
        // ingredients : stem, bone, skin, stone of purity
        1864, 1867, 1872, 1875
    };

    final static int[]  = {
    };

    // animal drop list
    final static int[][] _adls = {BEAST_SHOTS, PET_FOODS, HEAD_ACCESSORY, DYE, KEYS, ECHO_CRYSTAL, {5575, ITEM_ID_ADENA}};
    final static int[] _adl = carr(_adls);

    private static int[] carr() {
        int[] list = new int[];
        return list;
    }
    */
}
